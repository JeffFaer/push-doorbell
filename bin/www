#!/usr/bin/env node

/**
 * Module dependencies.
 */
var debug = require('debug')('push-doorbell:server');
var app = require('../app');
var fs = require('fs');
var http = require('http');
var https = require('https');
var express = require('express');
var config = require('../config/config');

var httpsOptions = {
    cert: fs.readFileSync('./config/' + config.sslCert),
    key: fs.readFileSync('./config/' + config.sslKey),
};

if (typeof config.sslCa === 'string') {
    httpsOptions.ca = fs.readFileSync('./config/' + config.sslCa);
}

/**
 * Ensure all traffic is forwards to https
 */

var httpApp = express();
httpApp.all('*', function(req, res) {
    res.redirect('https://' + req.hostname + ':' + app.get('port') + req.url);
});

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(config.httpPort || '3000');
var httpsPort = normalizePort(config.httpsPort || '4000');
httpApp.set('port', httpPort);
app.set('port', httpsPort);

/**
 * Create servers.
 */

var httpServer = http.createServer(httpApp);
var httpsServer = https.createServer(httpsOptions, app);

/**
 * Listen on provided port, on all network interfaces.
 */

httpServer.listen(httpApp.get('port'));
httpServer.on('error', onError.bind(null, httpApp.get('port')));
httpServer.on('listening', onListening.bind(null, httpServer));

httpsServer.listen(app.get('port'));
httpsServer.on('error', onError.bind(null, app.get('port')));
httpsServer.on('listening', onListening.bind(null, httpsServer));

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(port, error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
